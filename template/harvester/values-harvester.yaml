# be sure to add all "required" values...

# amazonec2, azure, digitalocean, harvester, vsphere, custom
cloudprovider: harvester

# cloud provider credentials (example: aws-creds)
cloudCredentialSecretName: cc-g8zs9 

# rancher manager url
rancher:
  cattle:
    url: rancher.192.168.1.112.sslip.io

# cluster values
cluster:
  # annotations:
    # key: value
  # labels:
    # key: value
  name: rke2-cluster-harvester
  config:
    kubernetesVersion: v1.30.6+rke2r1 # https://github.com/rancher/rke2/releases
    enableNetworkPolicy: true
    localClusterAuthEndpoint:
      enabled: false
    # additionalManifests: |-
    #   apiVersion: v1
    #   kind: Pod
    #   metadata:
    #     name: example-manifest
    #   spec:
    #     containers:
    #     - name: example
    #       image: example:1.0.0
    #       ports:
    #       - containerPort: 80
    # agentEnvVars:
      # - key:value
    # defaultClusterRoleForProjectMembers: ''
    # defaultPodSecurityAdmissionConfigurationTemplateName: ''
    # defaultPodSecurityPolicyTemplateName: ''
    globalConfig:
      systemDefaultRegistry: docker.io # default registry
      cni: canal # canal, calico, cilium, multus,canal, multus,calico, multus,cilium
      docker: false
      # token: ''
      # tls-san:
        # - url
        # - ip
      # disable:
        # - rke2-coredns
        # - rke2-ingress-nginx
        # - rke2-metrics-server
      disable_scheduler: false
      disable_cloud_controller: false
      disable_kube_proxy: false
      etcd_expose_metrics: false
      profile: '' # cis-1.6, cis-1.23
      selinux: false
      secrets_encryption: false
      write_kubeconfig_mode: 0600
      use_service_account_credentials: false
      protect_kernel_defaults: false
      cloud_provider_name: '' # https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/set-up-cloud-providers
      # cloud_provider_config: '' # cloud provider config secret here (example: secret://fleet-default:cloudprovider)
      # kube_controller_manager_arg:
        # - kube controller manager arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager)
      # kube_scheduler_arg:
        # - kube scheduler arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler)
      # kube_apiserver_arg:
        # - kube apiserver arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver)
      # kube_proxy_arg:
        # - kube proxy arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy)
      # kubelet_arg:
        # - kubelet arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet)
    # controlPlaneConfig:
      # same options as globalConfig
      # only will apply to the control plane nodes
    # workerConfig:
      # same options as globalConfig
      # only will apply to the worker nodes
    registries:
      enabled: false
      # configs:
        # - name: registry.example.com
          # authConfigSecretName: registry-creds
          # caBundle: ''
          # insecureSkipVerify: false
          # tlsSecretName: ''
      # mirrors:
        # - name: docker.io
          # endpoints: ['registry.example.com']
      # rewrite:
         # "^rancher/(.*)": "mirrorproject/rancher-images/$1"
    upgradeStrategy:
      controlPlaneConcurrency: 10%
      controlPlaneDrainOptions:
        enabled: false
        # deleteEmptyDirData: true
        # disableEviction: false
        # force: false
        # gracePeriod: -1
        # ignoreDaemonSets: true
        # ignoreErrors: false
        # skipWaitForDeleteTimeoutSeconds: 0
        # timeout: 120
      workerConcurrency: 10%
      workerDrainOptions:
        enabled: false
        # deleteEmptyDirData: true
        # disableEviction: false
        # force: false
        # gracePeriod: -1
        # ignoreDaemonSets: true
        # ignoreErrors: false
        # skipWaitForDeleteTimeoutSeconds: 0
        # timeout: 120

# node and nodepool(s) values
nodepools:
  - name: control-plane-nodes
    # displayName: cp-nodes
    quantity: 1
    etcd: true
    controlplane: true
    worker: true
    
    # labels:
      # key: value
    # taints:
      # effect: value
      # key: value
      # value: value
    paused: false
    # drainBeforeDelete: true
    # drainBeforeDeleteTimeout: 30s
    # unhealthyNodeTimeout: 60s
    # machineDeploymentLabels:
      # key: value
    # kubeconfigContent: # only needed if not using cloudCredentialSecretName
    cpuCount: 4 # required (example: 4)
    # diskBus: virtio
    # diskInfo: ''
    diskSize: 200 # required (example: 64)
    imageName: default/image-trxw9  # required (example: default/image-xyz)
    # keyPairName: ''
    memorySize: 20 # required (example: 8)
    # networkInfo: ''
    # networkModel: virtio
    networkName: default/vlan1 # required (example: default/default)
    # networkType: ''
    # sshPassword: ''
    # sshPort: 22
    # sshPrivateKeyPath: ''
    sshUser:  # required (example: rocky)
    userData: |
      #cloud-config
      disable_root: false
      package_update: true
      packages:
        - vim
        - sudo
        - epel-release
        - bind-utils
        - qemu-guest-agent
      runcmd:
        - sysctl -w net.ipv6.conf.all.disable_ipv6=1
        - dnf install -y iscsi-initiator-utils
        - systemctl enable iscsid
        - systemctl start iscsid
        - iscsiadm --version
      ssh_pwauth: True
      users:
        - name: root
          hashed_passwd: $6$wF4CODsMlmXQn0r5$x32sJP1ehp97SUbUmEHV.vzhFNjxf4nbBW3qOYQt.Ed/v.M0eP0fxXOByQMNp/Fv4PLYJ8/c6SpQv4Qd8qWaJ/
          lock_passwd: false
          shell: /bin/bash
          ssh_authorized_keys:
            - ssh-ed25519
              AAAAC3NzaC1lZDI1NTE5AAAAIGXodQ11B19sJi9iHdsGhLcIhltEvYpjrTMuDARK1Yc2
              joshua.yorko@gmail.com
        - name: kdlocpanda
          hashed_passwd: $6$wF4CODsMlmXQn0r5$x32sJP1ehp97SUbUmEHV.vzhFNjxf4nbBW3qOYQt.Ed/v.M0eP0fxXOByQMNp/Fv4PLYJ8/c6SpQv4Qd8qWaJ/
          lock_passwd: false
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          ssh_authorized_keys:
            - ssh-ed25519
              AAAAC3NzaC1lZDI1NTE5AAAAIGXodQ11B19sJi9iHdsGhLcIhltEvYpjrTMuDARK1Yc2
              joshua.yorko@gmail.com

      network:
        version: 1
        config:
          - type: nameserver
            address:
              - 192.168.1.1


 

# addons values
addons:
  monitoring:
    enabled: false
    # version: 103.0.4+up45.31.1
    # values:
      # values here

  longhorn:
    enabled: true
    # version: 103.2.2+up1.5.4
    # values:
      # values here

  neuvector:
    enabled: false
    # version: 103.0.2+up2.7.3
    # values:
      # values here